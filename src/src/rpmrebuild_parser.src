# to be sourced from bash
###############################################################################
#
#    Copyright (C) 2002 by Eric Gerbier
#    Bug reports to: gerbier@users.sourceforge.net
#    $Id$
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
###############################################################################
function Usage
{
	Usage_Message="
$0 is a tool to rebuild an rpm file from the rpm database
Usage: $0 [options] package
options:
   -a, --additional <flags>    additional flags to be pass to the rpmbuild
   -b, --batch                 batch mode
   -c, --comment-missing <y|n> comment missing files in the specfile.
                               default - no.
                               This flag is only meanful with --verify no
   -d, --directory <dir>       specify the working directory
   -D, --define <define>       defines to be passed to the rpmbuild
   -e, --edit-spec             edit specfile
   -f, --filter <file>         apply an external filter on generated specfile
   -k, --keep-perm,
       --pug-from-fs           keep installed files permission, uid and gid
       --pug-from-db (default) use files permission, uid and gid from rpm db
   -m  --modify <script>       script (or program) to modify unpacked rpm files
   -p, --package               use package file, not installed rpm
   -P, --autoprovide
   -R, --autorequire
   -s, --spec-only <spec>      generate specfile only
                               (If <spec> '-' stdout will be used)
   -v, --verbose               verbose
   -V, --version               print version
   -w, --warning               print warning if detect filenames with
                               globbing characters (default - no)
   -y, --verify <yes|no>       need verify package before processing
                               (default - yes)
   -h, --help                  print this help

Copyright (C) 2002 by Eric Gerbier
this program is distributed under GNU General Public License
"
	Echo "$Usage_Message"
}

###############################################################################
function Try_Help
{
	Echo "Try \`$0 --help' for more information."
}

###############################################################################
function UnrecognizedOption
{
	Echo "$0: unrecognized option \`--$LONG_OPTION'"
	Try_Help
}

function AmbiguousOption
{
	Echo "$0: ambiguous option \`--$LONG_OPTION'"
	Try_Help
}

###############################################################################
function RequeredArgument
{
	[ "x$SHORT_OPTION" = "x-" ] || return 0  # we use short option,
                                                 # do nothing
	if [ "$OPTARG_EXIST" ]; then
		[ "$OPTIND_INCR" ] && OPTIND=$[OPTIND + 1]
	else
		Echo "$0: option \`$LONG_OPTION' requires an argument"
		Try_Help
		return 1
	fi
	return 0
}
###############################################################################
function CommandLineParsing
{
	# Default flags' values. To be sure they don't came from environment
	NEED_EXIT=""  # if not empty should be set to desired exit status
	additional=""
	autoprovide="no"
	autorequire="no"
	batch="no"
	need_change_files="no"
	need_change_spec="no"
	rpm_defines=""
	rpmdir=""
	package_flag=""
	spec_only="no"
	specfile=""
	verify="yes"
	rpm_verbose="--quiet"
	export keep_perm="no"
	export comment_missing="no"
	export warning="no"
	PAQUET=""
	PAQUET_NAME=""

	CreateProcessing "init" || return
	while getopts "a:A:bc:d:D:ef:F:hkm:pPRs:S:vVwy:-:" opt; do
		OPTIND_INCR=""
		case "$opt" in
			a) LONG_OPTION=additional;;
			A) LONG_OPTION=change-all;;
			b) LONG_OPTION=batch;;
			c) LONG_OPTION=comment-missing;;
			d) LONG_OPTION=dir;;
			D) LONG_OPTION=define;;
			e) LONG_OPTION=edit-spec;;
			f) LONG_OPTION=filter;;
			F) LONG_OPTION=change-files;;
			k) LONG_OPTION=keep-perm;;
			m) LONG_OPTION=modify;;    
			p) LONG_OPTION=package;;
			P) LONG_OPTION=autoprovide;;
			R) LONG_OPTION=autorequire;;
			s) LONG_OPTION=spec-only;;
			S) LONG_OPTION=change-spec;;
			h) LONG_OPTION=help;;
			v) LONG_OPTION=verbose;;
			V) LONG_OPTION=version;;
			w) LONG_OPTION=warning;;
			y) LONG_OPTION=verify;;

                	-)
	        		case "x$OPTARG" in
					x*=*)
						LONG_OPTION=${OPTARG%%=*}
						OPTARG=${OPTARG#*=}
						OPTARG_EXIST=1
					;;

					*)
                   				LONG_OPTION="$OPTARG"
                   				if [ $OPTIND -le $# ]; then
                      					eval OPTARG=\$$OPTIND
                      					OPTARG_EXIST=1
							OPTIND_INCR=1
                   				else
                      					OPTARG=""
                      					OPTARG_EXIST=""
                   				fi
					;;
				esac
               		;;

			*)
				Try_Help
				return 1
			;;
		esac

		# Get "full" long option
		case "$LONG_OPTION" in
			a | \
			au | \
			aut | \
			auto )
				AmbiguousOption
				return 1
			;;

			ad | \
			add | \
			addi | \
			addit | \
			additi | \
			additio | \
			addition | \
			additiona | \
			additional)
				LONG_OPTION='additional'
			;;

			autop | \
			autopr | \
			autopro | \
			autoprov | \
			autoprovi | \
			autoprovid | \
			autoprovide)
				LONG_OPTION='autoprovide'
			;;

			autor | \
			autore | \
			autoreq | \
			autorequ | \
			autorequi | \
			autorequir | \
			autorequire)
				LONG_OPTION="autorequire"
			;;

			b | \
			ba | \
			bat | \
			batc | \
			batch)
				LONG_OPTION="batch"
			;;

			c | \
			c- | \
			ch- | \
			cha- | \
			chan- | \
			chang- | \
			change-)
				AmbiguousOption
				return 1
			;;

			change-a | \
			change-al | \
			change-all)
				LONG_OPTION='change-all'
			;;

			change-f | \
			change-fi | \
			change-fil | \
			change-file | \
			change-files)
				LONG_OPTION="change-files"
			;;

			change-s | \
			change-sp | \
			change-spe | \
			change-spec)
				LONG_OPTION="change-spec"
			;;

			co | \
			com | \
			comm | \
			comme | \
			commen | \
			comment | \
			comment- | \
			comment-m | \
			comment-mi | \
			comment-mis | \
			comment-miss | \
			comment-missi | \
			comment-missin | \
			comment-missing)
				LONG_OPTION="comment-missing"
			;;

			d)
				AmbiguousOption
				return 1
			;;

			de | \
			def | \
			defi | \
			defin | \
			define)
				LONG_OPTION="define"
			;;

			di | \
			dir | \
			dire | \
			direc | \
			direct | \
			directo | \
			director | \
			directory)
				LONG_OPTION='directory'
			;;

			e | \
			ed | \
			edi | \
			edit | \
			edit- | \
			edit-s | \
			edit-sp | \
			edit-spe | \
			edit-spec)
				LONG_OPTION='edit-spec'
			;;

			f | \
			fi | \
			fil | \
			filt | \
			filte | \
			filter)
				LONG_OPTION='change-spec' # alias
			;;
			
			h | \
			he | \
			hel | \
			help)
				LONG_OPTION='help'
			;;

			k | \
			ke | \
			kee | \
			keep | \
			keep- | \
			keep-p | \
			keep-pe | \
			keep-per | \
			keep-perm)
				LONG_OPTION='pug-from-fs' # alias
			;;

			m | \
			mo | \
			mod | \
			modi | \
			modif | \
			modify)
				LONG_OPTION='change-files' # alias
			;;

			p)
				AmbiguousOption
				return 1
			;;

			pa | \
			pac | \
			pack | \
			packa | \
			packag | \
			package)
				LONG_OPTION='package'
                	;;

			pu | \
			pug | \
			pug- | \
			pug-f | \
			pug-fr | \
			pug-fro | \
			pug-from | \
			pug-from-)
				AmbiguousOption
				return 1
			;;

			pug-from-d | \
			pug-from-db)
				LONG_OPTION='pug-from-db'
			;;

			pug-from-f | \
			pug-from-fs)
				LONG_OPTION='pug-from-fs' # alias
			;;

			s | \
			sp | \
			spe | \
			spec | \
			spec- | \
			spec-o | \
			spec-on | \
			spec-onl | \
			spec-only)
				LONG_OPTION='spec-only'
			;;

			v | \
			ve | \
			ver )
				AmbiguousOption
				return 1
			;;

			verb | \
			verbo | \
			verbos | \
			verbose)
				LONG_OPTION='verbose'
			;;

			veri | \
			verif | \
			verify)
				LONG_OPTION='verify'
			;;

			vers | \
			versi | \
			versio | \
			version)
				LONG_OPTION='version'
			;;

			w | \
			wa | \
			war | \
			warn | \
			warni | \
			warnin | \
			warning)
				LONG_OPTION='warning'
			;;

			*)
				UnrecognizedOption
				return 1
			;;
		esac || return

		# Ok, finally, let us process options
		SHORT_OPTION="$opt"
		case "$LONG_OPTION" in
			additional)
				RequeredArgument || return
				additional="$OPTARG"
			;;

			autoprovide)
				autoprovide="yes"
			;;

			autorequire)
				autorequire="yes"
			;;

			batch)
				batch="yes"
			;;

			change-all)
				RequeredArgument       || return
				CreateProcessing "all" || return
			;;

			change-files)
				RequeredArgument         || return
				CreateProcessing "files" || return
			;;

			change-spec)
				RequeredArgument || return
				CreateProcessing "spec" || return
			;;

			comment-missing)
				RequeredArgument || return
				case "x$OPTARG" in
			   		x[yY]*) comment_missing="yes";;
                           		*)      comment_missing="no";;
				esac
			;;

			define)
				RequeredArgument || return
				rpm_defines="$rpm_defines --define '$OPTARG'"
			;;

			directory)
				RequeredArgument || return
				rpmdir="$OPTARG"
				rpm_defines="$rpm_defines --define '_rpmdir $rpmdir'" 
				mkdir -p -- "$rpmdir"
				rpmdir="$(cd $rpmdir && echo $PWD)" || {
					Error "Can't changedir to '$rpmdir'"
					return 1
				}
			;;

			edit-spec)
				CreateProcessing "edit" || return
			;;

			help)
				Usage
				NEED_EXIT=0
				return 0
			;;

			package)
                   		package_flag="-p"
                	   	comment_missing="no"
                	;;

			pug-from-db)
				keep_perm="no"
			;;

			pug-from-fs)
				keep_perm="yes"
			;;

			spec-only)
				RequeredArgument || return
				spec_only="yes"
				specfile="$OPTARG"
			;;

			verbose)
				rpm_verbose="--verbose"
			;;

			verify)
				RequeredArgument || return
				case "x$OPTARG" in
			   		x[yY]*) verify="yes";;
                           		*)      verify="no";;
				esac
			;;

			version)
				echo "$VERSION"
				NEED_EXIT=0
				return 0
			;;

			warning)
				warning="yes"
			;;

			*)
				Error "Internal error: LONG_OPTION='$LONG_OPTION'"
				return 1
			;;
		esac || return
	done || return

	CreateProcessing "fini" || return
	[ "X$spec_only" = "Xyes" -a "X$need_change_files" = "Xyes" ] && {
		Error "You can't use both '--spec_only' and '--change-files/--change-all'"
		return 1
	}

	shift $((OPTIND - 1))
	case $# in
   		0)
			Error "package argument missing"
			Try_Help
			return 1
   		;;

   		1) # One argument, it's ok
      			PAQUET="$1"
      			if [ "x$package_flag" = "x" ]; then
         			PAQUET_NAME="$PAQUET"
      			else
         			PAQUET_NAME="${PAQUET##*/}"
         			if [ "x$PAQUET_NAME" = "x" ]; then
            				Error "Package file '$PAQUET' should not be a directory"
					return 1
         			else
	   				:
	 			fi
      			fi
		;;

		*)
			Error "multiple package arguments is illegal"
			Try_Help
			return 1
		;;
	esac || return

	# If no rpmdir was specified set variable to the native rpmdir value
	# (with respect to possible define)
	if [ -z "$rpmdir" ]; then
		rpmdir="$(eval rpm $rpm_defines --eval %_rpmdir)" || return
	fi
	return 0
}
