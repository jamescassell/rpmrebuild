#!/bin/bash
###############################################################################
#    Copyright (C) 2004 by Valery Reznic
#    This file is a part of the rpmrebuild project
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
###############################################################################

function spec_auto_req
{
	if [ "X$autorequire" = "Xno" ]; then
		echo 'AutoReq: no'
		echo '%undefine __find_requires'
	else
		echo 'AutoReq: yes'
		echo '#undefine __find_requires'
	fi
}
function spec_auto_prov
{
	if [ "X$autoprovide" = "Xno" ]; then
		echo 'AutoProv: no'
		echo '%undefine __find_provides'
	else
		echo 'AutoProv: yes'
		echo '#undefine __find_provides'
	fi
}
###############################################################################
function spec_query
{
	local RPM_QUERY="rpm --query --i18ndomains /dev/null $package_flag"
	HOME=$MY_LIB_DIR $RPM_QUERY $1 $PAQUET || return
	return 0
}

function spec_query_qf
{
	spec_query "--queryformat '$1'" || return
	return 0
}

# build the list of files in package
function spec_files
{
	rm -f $FILES_IN || return
	spec_query --spec_files > $FILES_IN || return
	/bin/bash $MY_LIB_DIR/rpmrebuild_files.sh < $FILES_IN || return
	return 0
}

function spec_preamble
{
	# Comment out Orig Release and add New one.
	local sed_release="/Release[[:space:]]*:/{s/^/#/;a\\
Release:       $RELEASE_NEW
	}"

	if [ "x$BUILDROOT" = "x/" ]; then
		:
	else
		echo "BuildRoot: $BUILDROOT" || return
	fi       
	spec_auto_prov || return
	spec_auto_req  || return

	if [ "x$RELEASE_NEW" = "x" ]; then
		spec_query --spec_preamble                         || return
	else
		spec_query --spec_preamble | sed -e "$sed_release" || return
	fi
}

function spec_provides
{
	# gpg key can not be provided
	# let us remove it.

	# Comment out Provides with pgp()
	local sed_provides='/Provides[[:space:]]*:[[:space:]]*gpg(.*)/s/^/#/'
	[ "X$autoprovide" = "Xyes" ] && sed_provides="$sed_provides$sed_comment"
	spec_query --spec_provides | sed -e "$sed_provides" || return
	return 0
}

function spec_requires
{
	# rpmlib dependencies are insert during rpm building
	# let us remove it.

	# Comment out Requires with rpmlib()
	local sed_requires='/Requires[[:space:]]*:[[:space:]]*rpmlib(.*)/s/^/#/'
	[ "X$autorequire" = "Xyes" ] && sed_requires="$sed_requires$sed_comment"
	spec_query --spec_requires | sed -e "$sed_requires" || return
	return 0
}

function SpecGeneration
{
	# Comment Out every string
	local sed_comment=';s/^/#/'

	local i=1
	spec_preamble                  > $SPEC_PREAMBLE.$i     || return
	spec_query --spec_conflicts    > $SPEC_CONFLICTS.$i    || return
	spec_query --spec_obsoletes    > $SPEC_OBSOLETES.$i    || return
	spec_provides                  > $SPEC_PROVIDES.$i     || return
	spec_requires                  > $SPEC_REQUIRES.$i     || return
	spec_query --spec_description  > $SPEC_DESCRIPTION.$i  || return
	spec_files                     > $SPEC_FILES.$i        || return
	spec_query --spec_triggers     > $SPEC_TRIGGERS.$i     || return
	spec_query --spec_pre          > $SPEC_PRE.$i          || return
	spec_query --spec_post         > $SPEC_POST.$i         || return
	spec_query --spec_preun        > $SPEC_PREUN.$i        || return
	spec_query --spec_postun       > $SPEC_POSTUN.$i       || return
	spec_query --spec_verifyscript > $SPEC_VERIFYSCRIPT.$i || return
	spec_query --spec_changelog    > $SPEC_CHANGELOG.$i    || return

	return 0
}

function spec_concatenate
{
	# duplicate all percent
	local sed_double_percent='s/%/%%/g'

	echo '# rpmrebuild autogenerated specfile' || return
	echo                                       || return

	cat                                         \
		$SPEC_PREAMBLE.$si_preamble         \
		$SPEC_CONFLICTS.$si_conflicts       \
		$SPEC_OBSOLETES.$si_obsoletes       \
		$SPEC_PROVIDES.$si_provides         \
		$SPEC_REQUIRES.$si_requires         \
	|| return

	echo                   || return
	echo	"%description" || return
	sed -e "$sed_double_percent"                \
		$SPEC_DESCRIPTION.$si_description   \
	|| return

	echo "%files" || return
	cat                                         \
		$SPEC_FILES.$si_files               \
	|| return

	# %%triger -> %trigger (in begin of line)
	local sed_trigger="/^%%trigger/s/^%%/%/1"
	# %%pre -> %pre (in begin of line) It'll work for %%preun too.
	local sed_pre="/^%%pre/s/^%%/%/1"
	# %%post -> %post (in begin of line) It'll work for %%postun too.
	local sed_post="/^%%pre/s/^%%/%/1"
	# %%verifyscript -> %verifyscript (in begin of line)
	local sed_verifyscript="/^%%pre/s/^%%/%/1"
	sed                                         \
		-e "$sed_double_percent"            \
		-e "$sed_trigger"                   \
		-e "$sed_pre"                       \
		-e "$sed_post"                      \
		-e "$sed_verifyscript"              \
		$SPEC_TRIGGERS.$si_triggers         \
		$SPEC_PRE.$si_pre                   \
		$SPEC_POST.$si_post                 \
		$SPEC_PREUN.$si_preun               \
		$SPEC_POSTUN.$si_postun             \
		$SPEC_VERIFYSCRIPT.$si_verifyscript \
	|| return

	echo "%changelog" || return
	sed -e "$sed_double_percent"                \
		$SPEC_CHANGELOG.$si_changelog       \
	|| return
	return 0
}
